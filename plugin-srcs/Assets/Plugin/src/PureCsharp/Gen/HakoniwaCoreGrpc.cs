// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hakoniwa_core.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace HakoniwaGrpc {
  public static partial class CoreService
  {
    static readonly string __ServiceName = "hakoniwa.CoreService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.AssetInfo> __Marshaller_hakoniwa_AssetInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.AssetInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.NormalReply> __Marshaller_hakoniwa_NormalReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.NormalReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.AssetInfoList> __Marshaller_hakoniwa_AssetInfoList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.AssetInfoList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.SimStatReply> __Marshaller_hakoniwa_SimStatReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.SimStatReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.SimulationTimeSyncOutputFile> __Marshaller_hakoniwa_SimulationTimeSyncOutputFile = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.SimulationTimeSyncOutputFile.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.AssetNotification> __Marshaller_hakoniwa_AssetNotification = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.AssetNotification.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.AssetNotificationReply> __Marshaller_hakoniwa_AssetNotificationReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.AssetNotificationReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.NotifySimtimeRequest> __Marshaller_hakoniwa_NotifySimtimeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.NotifySimtimeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.NotifySimtimeReply> __Marshaller_hakoniwa_NotifySimtimeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.NotifySimtimeReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.CreatePduChannelRequest> __Marshaller_hakoniwa_CreatePduChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.CreatePduChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.CreatePduChannelReply> __Marshaller_hakoniwa_CreatePduChannelReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.CreatePduChannelReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.SubscribePduChannelRequest> __Marshaller_hakoniwa_SubscribePduChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.SubscribePduChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::HakoniwaGrpc.SubscribePduChannelReply> __Marshaller_hakoniwa_SubscribePduChannelReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::HakoniwaGrpc.SubscribePduChannelReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.NormalReply> __Method_Register = new grpc::Method<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.NormalReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_hakoniwa_AssetInfo,
        __Marshaller_hakoniwa_NormalReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.NormalReply> __Method_Unregister = new grpc::Method<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.NormalReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unregister",
        __Marshaller_hakoniwa_AssetInfo,
        __Marshaller_hakoniwa_NormalReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.AssetInfoList> __Method_GetAssetList = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.AssetInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssetList",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_hakoniwa_AssetInfoList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply> __Method_StartSimulation = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartSimulation",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_hakoniwa_NormalReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply> __Method_StopSimulation = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopSimulation",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_hakoniwa_NormalReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.SimStatReply> __Method_GetSimStatus = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.SimStatReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSimStatus",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_hakoniwa_SimStatReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply> __Method_ResetSimulation = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetSimulation",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_hakoniwa_NormalReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.SimulationTimeSyncOutputFile, global::HakoniwaGrpc.NormalReply> __Method_FlushSimulationTimeSyncInfo = new grpc::Method<global::HakoniwaGrpc.SimulationTimeSyncOutputFile, global::HakoniwaGrpc.NormalReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FlushSimulationTimeSyncInfo",
        __Marshaller_hakoniwa_SimulationTimeSyncOutputFile,
        __Marshaller_hakoniwa_NormalReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.AssetNotification> __Method_AssetNotificationStart = new grpc::Method<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.AssetNotification>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AssetNotificationStart",
        __Marshaller_hakoniwa_AssetInfo,
        __Marshaller_hakoniwa_AssetNotification);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.AssetNotificationReply, global::HakoniwaGrpc.NormalReply> __Method_AssetNotificationFeedback = new grpc::Method<global::HakoniwaGrpc.AssetNotificationReply, global::HakoniwaGrpc.NormalReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AssetNotificationFeedback",
        __Marshaller_hakoniwa_AssetNotificationReply,
        __Marshaller_hakoniwa_NormalReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.NotifySimtimeRequest, global::HakoniwaGrpc.NotifySimtimeReply> __Method_NotifySimtime = new grpc::Method<global::HakoniwaGrpc.NotifySimtimeRequest, global::HakoniwaGrpc.NotifySimtimeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NotifySimtime",
        __Marshaller_hakoniwa_NotifySimtimeRequest,
        __Marshaller_hakoniwa_NotifySimtimeReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.CreatePduChannelRequest, global::HakoniwaGrpc.CreatePduChannelReply> __Method_CreatePduChannel = new grpc::Method<global::HakoniwaGrpc.CreatePduChannelRequest, global::HakoniwaGrpc.CreatePduChannelReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePduChannel",
        __Marshaller_hakoniwa_CreatePduChannelRequest,
        __Marshaller_hakoniwa_CreatePduChannelReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::HakoniwaGrpc.SubscribePduChannelRequest, global::HakoniwaGrpc.SubscribePduChannelReply> __Method_SubscribePduChannel = new grpc::Method<global::HakoniwaGrpc.SubscribePduChannelRequest, global::HakoniwaGrpc.SubscribePduChannelReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribePduChannel",
        __Marshaller_hakoniwa_SubscribePduChannelRequest,
        __Marshaller_hakoniwa_SubscribePduChannelReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HakoniwaGrpc.HakoniwaCoreReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CoreService</summary>
    [grpc::BindServiceMethod(typeof(CoreService), "BindService")]
    public abstract partial class CoreServiceBase
    {
      /// <summary>
      ///箱庭アセットを登録する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NormalReply> Register(global::HakoniwaGrpc.AssetInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///箱庭アセットを登録解除する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NormalReply> Unregister(global::HakoniwaGrpc.AssetInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///箱庭アセットのリストを取得する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.AssetInfoList> GetAssetList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///シミュレーションを開始する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NormalReply> StartSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///シミュレーションを終了する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NormalReply> StopSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///シミュレーション実行状況を取得する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.SimStatReply> GetSimStatus(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///シミュレーションを実行開始状態に戻す
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NormalReply> ResetSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///シミュレーション時間同期度合いを取得する
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NormalReply> FlushSimulationTimeSyncInfo(global::HakoniwaGrpc.SimulationTimeSyncOutputFile request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///箱庭アセット非同期通知
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task AssetNotificationStart(global::HakoniwaGrpc.AssetInfo request, grpc::IServerStreamWriter<global::HakoniwaGrpc.AssetNotification> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NormalReply> AssetNotificationFeedback(global::HakoniwaGrpc.AssetNotificationReply request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///箱庭シミュレーション時間取得
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.NotifySimtimeReply> NotifySimtime(global::HakoniwaGrpc.NotifySimtimeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///箱庭PDUチャネル作成
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.CreatePduChannelReply> CreatePduChannel(global::HakoniwaGrpc.CreatePduChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///箱庭PDUチャネル購読
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::HakoniwaGrpc.SubscribePduChannelReply> SubscribePduChannel(global::HakoniwaGrpc.SubscribePduChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CoreService</summary>
    public partial class CoreServiceClient : grpc::ClientBase<CoreServiceClient>
    {
      /// <summary>Creates a new client for CoreService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CoreServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CoreService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CoreServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CoreServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CoreServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///箱庭アセットを登録する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply Register(global::HakoniwaGrpc.AssetInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭アセットを登録する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply Register(global::HakoniwaGrpc.AssetInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      ///箱庭アセットを登録する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> RegisterAsync(global::HakoniwaGrpc.AssetInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭アセットを登録する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> RegisterAsync(global::HakoniwaGrpc.AssetInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      ///箱庭アセットを登録解除する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply Unregister(global::HakoniwaGrpc.AssetInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unregister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭アセットを登録解除する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply Unregister(global::HakoniwaGrpc.AssetInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unregister, null, options, request);
      }
      /// <summary>
      ///箱庭アセットを登録解除する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> UnregisterAsync(global::HakoniwaGrpc.AssetInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnregisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭アセットを登録解除する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> UnregisterAsync(global::HakoniwaGrpc.AssetInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unregister, null, options, request);
      }
      /// <summary>
      ///箱庭アセットのリストを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.AssetInfoList GetAssetList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭アセットのリストを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.AssetInfoList GetAssetList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssetList, null, options, request);
      }
      /// <summary>
      ///箱庭アセットのリストを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.AssetInfoList> GetAssetListAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭アセットのリストを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.AssetInfoList> GetAssetListAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssetList, null, options, request);
      }
      /// <summary>
      ///シミュレーションを開始する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply StartSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartSimulation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーションを開始する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply StartSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartSimulation, null, options, request);
      }
      /// <summary>
      ///シミュレーションを開始する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> StartSimulationAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartSimulationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーションを開始する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> StartSimulationAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartSimulation, null, options, request);
      }
      /// <summary>
      ///シミュレーションを終了する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply StopSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopSimulation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーションを終了する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply StopSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopSimulation, null, options, request);
      }
      /// <summary>
      ///シミュレーションを終了する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> StopSimulationAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopSimulationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーションを終了する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> StopSimulationAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopSimulation, null, options, request);
      }
      /// <summary>
      ///シミュレーション実行状況を取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.SimStatReply GetSimStatus(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSimStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーション実行状況を取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.SimStatReply GetSimStatus(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSimStatus, null, options, request);
      }
      /// <summary>
      ///シミュレーション実行状況を取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.SimStatReply> GetSimStatusAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSimStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーション実行状況を取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.SimStatReply> GetSimStatusAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSimStatus, null, options, request);
      }
      /// <summary>
      ///シミュレーションを実行開始状態に戻す
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply ResetSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetSimulation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーションを実行開始状態に戻す
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply ResetSimulation(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetSimulation, null, options, request);
      }
      /// <summary>
      ///シミュレーションを実行開始状態に戻す
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> ResetSimulationAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetSimulationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーションを実行開始状態に戻す
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> ResetSimulationAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetSimulation, null, options, request);
      }
      /// <summary>
      ///シミュレーション時間同期度合いを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply FlushSimulationTimeSyncInfo(global::HakoniwaGrpc.SimulationTimeSyncOutputFile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushSimulationTimeSyncInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーション時間同期度合いを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply FlushSimulationTimeSyncInfo(global::HakoniwaGrpc.SimulationTimeSyncOutputFile request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FlushSimulationTimeSyncInfo, null, options, request);
      }
      /// <summary>
      ///シミュレーション時間同期度合いを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> FlushSimulationTimeSyncInfoAsync(global::HakoniwaGrpc.SimulationTimeSyncOutputFile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushSimulationTimeSyncInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///シミュレーション時間同期度合いを取得する
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> FlushSimulationTimeSyncInfoAsync(global::HakoniwaGrpc.SimulationTimeSyncOutputFile request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FlushSimulationTimeSyncInfo, null, options, request);
      }
      /// <summary>
      ///箱庭アセット非同期通知
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::HakoniwaGrpc.AssetNotification> AssetNotificationStart(global::HakoniwaGrpc.AssetInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssetNotificationStart(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭アセット非同期通知
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::HakoniwaGrpc.AssetNotification> AssetNotificationStart(global::HakoniwaGrpc.AssetInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AssetNotificationStart, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply AssetNotificationFeedback(global::HakoniwaGrpc.AssetNotificationReply request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssetNotificationFeedback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NormalReply AssetNotificationFeedback(global::HakoniwaGrpc.AssetNotificationReply request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AssetNotificationFeedback, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> AssetNotificationFeedbackAsync(global::HakoniwaGrpc.AssetNotificationReply request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AssetNotificationFeedbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NormalReply> AssetNotificationFeedbackAsync(global::HakoniwaGrpc.AssetNotificationReply request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AssetNotificationFeedback, null, options, request);
      }
      /// <summary>
      ///箱庭シミュレーション時間取得
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NotifySimtimeReply NotifySimtime(global::HakoniwaGrpc.NotifySimtimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NotifySimtime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭シミュレーション時間取得
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.NotifySimtimeReply NotifySimtime(global::HakoniwaGrpc.NotifySimtimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NotifySimtime, null, options, request);
      }
      /// <summary>
      ///箱庭シミュレーション時間取得
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NotifySimtimeReply> NotifySimtimeAsync(global::HakoniwaGrpc.NotifySimtimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NotifySimtimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭シミュレーション時間取得
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.NotifySimtimeReply> NotifySimtimeAsync(global::HakoniwaGrpc.NotifySimtimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NotifySimtime, null, options, request);
      }
      /// <summary>
      ///箱庭PDUチャネル作成
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.CreatePduChannelReply CreatePduChannel(global::HakoniwaGrpc.CreatePduChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePduChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭PDUチャネル作成
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.CreatePduChannelReply CreatePduChannel(global::HakoniwaGrpc.CreatePduChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePduChannel, null, options, request);
      }
      /// <summary>
      ///箱庭PDUチャネル作成
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.CreatePduChannelReply> CreatePduChannelAsync(global::HakoniwaGrpc.CreatePduChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePduChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭PDUチャネル作成
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.CreatePduChannelReply> CreatePduChannelAsync(global::HakoniwaGrpc.CreatePduChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePduChannel, null, options, request);
      }
      /// <summary>
      ///箱庭PDUチャネル購読
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.SubscribePduChannelReply SubscribePduChannel(global::HakoniwaGrpc.SubscribePduChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribePduChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭PDUチャネル購読
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::HakoniwaGrpc.SubscribePduChannelReply SubscribePduChannel(global::HakoniwaGrpc.SubscribePduChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribePduChannel, null, options, request);
      }
      /// <summary>
      ///箱庭PDUチャネル購読
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.SubscribePduChannelReply> SubscribePduChannelAsync(global::HakoniwaGrpc.SubscribePduChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribePduChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///箱庭PDUチャネル購読
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::HakoniwaGrpc.SubscribePduChannelReply> SubscribePduChannelAsync(global::HakoniwaGrpc.SubscribePduChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribePduChannel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CoreServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CoreServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CoreServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_Unregister, serviceImpl.Unregister)
          .AddMethod(__Method_GetAssetList, serviceImpl.GetAssetList)
          .AddMethod(__Method_StartSimulation, serviceImpl.StartSimulation)
          .AddMethod(__Method_StopSimulation, serviceImpl.StopSimulation)
          .AddMethod(__Method_GetSimStatus, serviceImpl.GetSimStatus)
          .AddMethod(__Method_ResetSimulation, serviceImpl.ResetSimulation)
          .AddMethod(__Method_FlushSimulationTimeSyncInfo, serviceImpl.FlushSimulationTimeSyncInfo)
          .AddMethod(__Method_AssetNotificationStart, serviceImpl.AssetNotificationStart)
          .AddMethod(__Method_AssetNotificationFeedback, serviceImpl.AssetNotificationFeedback)
          .AddMethod(__Method_NotifySimtime, serviceImpl.NotifySimtime)
          .AddMethod(__Method_CreatePduChannel, serviceImpl.CreatePduChannel)
          .AddMethod(__Method_SubscribePduChannel, serviceImpl.SubscribePduChannel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CoreServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.NormalReply>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_Unregister, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.NormalReply>(serviceImpl.Unregister));
      serviceBinder.AddMethod(__Method_GetAssetList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.AssetInfoList>(serviceImpl.GetAssetList));
      serviceBinder.AddMethod(__Method_StartSimulation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply>(serviceImpl.StartSimulation));
      serviceBinder.AddMethod(__Method_StopSimulation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply>(serviceImpl.StopSimulation));
      serviceBinder.AddMethod(__Method_GetSimStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.SimStatReply>(serviceImpl.GetSimStatus));
      serviceBinder.AddMethod(__Method_ResetSimulation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::HakoniwaGrpc.NormalReply>(serviceImpl.ResetSimulation));
      serviceBinder.AddMethod(__Method_FlushSimulationTimeSyncInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HakoniwaGrpc.SimulationTimeSyncOutputFile, global::HakoniwaGrpc.NormalReply>(serviceImpl.FlushSimulationTimeSyncInfo));
      serviceBinder.AddMethod(__Method_AssetNotificationStart, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::HakoniwaGrpc.AssetInfo, global::HakoniwaGrpc.AssetNotification>(serviceImpl.AssetNotificationStart));
      serviceBinder.AddMethod(__Method_AssetNotificationFeedback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HakoniwaGrpc.AssetNotificationReply, global::HakoniwaGrpc.NormalReply>(serviceImpl.AssetNotificationFeedback));
      serviceBinder.AddMethod(__Method_NotifySimtime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HakoniwaGrpc.NotifySimtimeRequest, global::HakoniwaGrpc.NotifySimtimeReply>(serviceImpl.NotifySimtime));
      serviceBinder.AddMethod(__Method_CreatePduChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HakoniwaGrpc.CreatePduChannelRequest, global::HakoniwaGrpc.CreatePduChannelReply>(serviceImpl.CreatePduChannel));
      serviceBinder.AddMethod(__Method_SubscribePduChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HakoniwaGrpc.SubscribePduChannelRequest, global::HakoniwaGrpc.SubscribePduChannelReply>(serviceImpl.SubscribePduChannel));
    }

  }
}
#endregion
